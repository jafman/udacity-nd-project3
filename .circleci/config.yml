version: 2.1

commands:
  destroy-environment:
    description: Destroy environment on failure
    parameters:
      stack:
        type: string
    steps:
      - run:
          name: Destroy backend
          when: on_fail
          command: |
            aws cloudformation delete-stack \
              --stack-name "<<parameters.stack>>"
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.  
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS = $(curl https://kvdb.io/ELHy62f4JrtMqheL4muLVN/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build frontend 
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths:
            - "frotend/node_modules"
          key: build-frontend
  
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build backend
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths:
            - "backend/node_modules"
          key: build-backend
  
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [build-frontend]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm i
            npm run test
  
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [build-backend]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm i
            npm run test
  
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [build-frontend]
      - run:
          name: Scan/Audit Frontend
          command: |
            cd frontend
            npm i
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
  
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [build-backend]
      - run:
          name: Scan/Audit Backend
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
  
  deploy-infrastructure:
    docker: 
      - image:  amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install tar & gzip
          command: |
            yum -y install tar gzip
      - run:
          name: ensure backend infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags Project=udapeople:backend
      - run:
          name: ensure frontend infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags Project=udapeople:frontend
      
      - run:
          name: prepare files to be persisted to workspace
          command: |
            mkdir -p ~/tmp/backup
            cp -r .circleci/ansible/. ~/tmp/backup/
      
      - run:
          name: add backend-ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --filters Name=tag:Project,Values=udapeople:backend \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> ~/tmp/backup/inventory.txt
            cat ~/tmp/backup/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - tmp/backup/*
      - destroy-environment:
          stack: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment:
          stack: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["ce:c6:27:03:ff:47:27:f2:30:b8:95:80:e2:1f:17:c2"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
  # - run:
  #     name: install AWS CLI
  #     command: |
  #       apk add curl
  #       apk add unzip
  #       curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
  #       unzip awscliv2.zip
  #       ./aws/install
      - run:
          name: run ansible tasks
          command: |
            cd ~/tmp/backup/
            ls
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run Migrations
          command: |
            cd backend
            npm i
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io OR memstash.io
          command: |
            cat ~/project/backend/migrations_dump.txt
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl -k https://kvdb.io/ELHy62f4JrtMqheL4muLVN/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            fi
  
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install Node.js & other dependencies
          command: |
            yum -y install tar gzip
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
            . ~/.nvm/nvm.sh
            nvm install --lts
            node -e "console.log('Running Node.js ' + process.version)"
            npm -v
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters Name=tag:Project,Values=udapeople:backend \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            . ~/.nvm/nvm.sh
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          stack: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment:
          stack: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["ce:c6:27:03:ff:47:27:f2:30:b8:95:80:e2:1f:17:c2"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
      - run:
          name: Install Node.js & other dependencies
          command: |
            apk -U upgrade
            apk add tar
            apk add --update nodejs npm
            node -e "console.log('Running Node.js ' + process.version)"
            npm -v
      - run:
          name: deploy backend objects
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cd ~/tmp/backup/
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml

  test-artifacts:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run:
          name: Creating Dummy Artifacts
          command: |
            mkdir -p ~/tmp/artifacts
            cd ~/tmp/artifacts
            touch artifact-1
            echo "my artifact file" > artifact-1;

      - store_artifacts:
          path: ~/tmp/artifacts
          # destination: artifact-file
  download-artifacts:
    docker:
      - image: amazon/aws-cli
    steps:
      - run:
          name: Download Artifacts
          command: |
            yum -y install wget
            echo "Token: $CI_TOKEN"
            mkdir downloads
            cd downloads
            curl -H "Circle-Token: $CI_TOKEN" https://circleci.com/api/v1.1/project/github/jafman/udacity-nd-project3/latest/artifacts \
            | grep -o 'https://[^"]*' \
            | wget --verbose --header "Circle-Token: $CIRCLE_TOKEN" --input-file -
            ls
            cat artifact-1

workflows:
  default:
    jobs:
      - test-artifacts
      - download-artifacts:
          requires: [test-artifacts]
      # - deploy-infrastructure
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]

      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - scan-backend:
      #     requires: [build-backend]