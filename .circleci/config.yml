version: 2.1

commands:
  destroy-environment:
    description: Destroy environment on failure
    parameters:
      stack:
        type: string
    steps:
      - run:
          name: Destroy backend
          when: on_fail
          command: |
            aws cloudformation delete-stack \
              --stack-name "<<parameters.stack>>"
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build frontend 
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths:
            - "frotend/node_modules"
          key: build-frontend
  
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build backend
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths:
            - "backend/node_modules"
          key: build-backend
  
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [build-frontend]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm i
            npm run test
  
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [build-backend]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm i
            npm run test
  
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [build-frontend]
      - run:
          name: Scan/Audit Frontend
          command: |
            cd frontend
            npm i
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
  
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [build-backend]
      - run:
          name: Scan/Audit Backend
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
  
  deploy-infrastructure:
    docker: 
      - image:  amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install tar & gzip
          command: |
            yum -y install tar gzip
      - run:
          name: ensure backend infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople:backend
      - run:
          name: ensure frontend infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople:frontend
      - run:
          name: add backend-ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --filters Name=tag:Project,Values=udapeople:backend \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/*
      - destroy-environment:
          stack: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment:
          stack: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

  debug-task:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: copy files from github
          command: |
            mkdir -p ~/tmp/backup
            cp -r .circleci/ansible/. ~/tmp/backup/
    # cat .circleci/ansible/inventory.txt > ~/tmp/backup/inv.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - tmp/backup/*

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - add_ssh_keys:
          fingerprints: ["f6:05:d3:8b:58:fb:56:f0:78:01:7d:74:18:66:aa:17"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
      - run:
          name: run ansible tasks
          command: |
            cd ~/tmp/backup/
            ls
    # ansible-playbook -i inventory.txt configure-server.yml
workflows:
  default:
    jobs:
      - debug-task
      - configure-infrastructure:
          requires: [debug-task]
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - scan-backend:
      #     requires: [build-backend]